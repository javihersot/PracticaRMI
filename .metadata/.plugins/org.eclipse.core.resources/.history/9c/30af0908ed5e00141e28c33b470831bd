package Servidor;

import java.io.Serializable;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.ArrayList;

import Cliente.Callback;
import Cliente.CallbackInterface;


public class FuncionesImpl extends UnicastRemoteObject implements Funciones,
		Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -8779351076503953090L;

	private Map<String, UserImpl> regUsers;
	private Map<String,CallbackInterface> connected;


	public FuncionesImpl() throws RemoteException{
		this.regUsers = new HashMap<String, UserImpl>();
		this.connected = new HashMap<String,CallbackInterface>();
	}
	
	public boolean searchUser(String user) throws RemoteException{
		return regUsers.containsKey(user);
	}

	@Override
	public boolean register(String userName, String password, String password2)
			throws RemoteException {
		if (searchUser(userName)) {
			System.out.println("Nombre de usuario ya en uso.");
			return false;
		} else {
			if (!password.equals(password2)) {
				System.out
						.println("Las contraseñas introducidas no coinciden.");
				return false;
			} else {
				UserImpl usuario = new UserImpl(userName, password);
				regUsers.put(usuario.getUserName(),usuario);
				return true;
			}
		}
	}

	@Override
	public boolean connect(String userName, String password)
			throws RemoteException, FailLoggingException {
		CallbackInterface callback;
		String nombreCallback = userName +"Callback";
		if (!regUsers.containsKey(userName)
				|| !regUsers.get(userName).getPassword().equals(password)) {
			throw new FailLoggingException();
		}
		try {
			callback = (Cliente.CallbackInterface) Servidor.registro.lookup(nombreCallback);
			connected.put(userName,callback);
		} catch (NotBoundException e) {
			e.printStackTrace();
		}
		Servidor.registro.rebind(userName, new UserImpl(userName,password));
		return true;
	}

	@Override
	public void disconnect(String userName) throws RemoteException {
		connected.remove(userName);
	}
	
	public void deleteUser(String userName){
		UserImpl aux = regUsers.get(userName);
		regUsers.remove(userName);
	}
	

	
	// Metodo para añadir un usuario, previa comprobación de que se puede
	public void addUser(String userName,UserImpl user){
		regUsers.put(userName, user);
	}
	
	public boolean isConnected(String user){
		return connected.containsKey(user);
	}
	
	public void recieveMessage(DirectMessage message){
		this.regUsers.get(message.getDestinatario()).putMessage(message);
		try {
			this.connected.get(message.getDestinatario()).notifyMessage();
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public void recieveFollower(String userFollowed, String userFollowing){
		this.regUsers.get(userFollowed).putFollower(userFollowing);
		try {
			this.connected.get(userFollowed).notifyFollower(String userFollowing);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public boolean following(String user1, String user2){
		boolean res = false;
		try {
			res = regUsers.get(user1).following().contains(user2);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println(res);
		return res;
	}

}
