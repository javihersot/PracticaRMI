package Servidor;

import java.io.Serializable;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class UserImpl extends UnicastRemoteObject implements User, Serializable {

	private String password;
	private String userName;
	private ArrayList<String> followers;
	private ArrayList<String> following;
	private Map<String, String> timeLine;
	private ArrayList<DirectMessage> mailbox;

	public UserImpl(String userName, String password)throws RemoteException {
		this.password = password;
		this.userName = userName;
		followers = new ArrayList<String>();
		following = new ArrayList<String>();
		timeLine = new HashMap<String, String>();
		Servidor.registro.rebind("perfil", new ProfileImpl());
		Servidor.registro.
	}

	public String getUserName() {
		return userName;
	}

	@Override
	public boolean setUser(String name) throws RemoteException {
		if (!Servidor.misFuncionesImpl.searchUser(name)) {
			Servidor.misFuncionesImpl.deleteUser(userName);
			this.userName = name;
			Servidor.misFuncionesImpl.addUser(this.userName, this);
			return true;
		} else {
			System.out.println("Nombre de usuario actualmente en uso.");
			return false;
		}
	}

	@Override
	public boolean setPassword(String oldPassword, String newPassword1,
			String newPassword2) throws RemoteException {
		if (!newPassword1.equals(newPassword2)) {
			System.out.println("Las contrase√±as no coinciden.");
			return false;
		} else {
			this.password = newPassword1;
			return true;
		}

	}

	@Override
	public void tweet(String tweet) throws RemoteException {
		// TODO Auto-generated method stub

	}

	@Override
	public boolean directMessage(String user, String msg)
			throws RemoteException {
			if (!followers.contains(user)){
				System.out.println("Usuario incorrecto o no te sigue.");
				return false;
			}
			else{
				DirectMessage message = new DirectMessage(this.userName, user, msg);
				// TODO
				return true;
				}
	}

	@Override
	public ArrayList<String> following() throws RemoteException {
		return this.following;
	}

	@Override
	public ArrayList<String> followers() throws RemoteException {
		return followers;
	}

	@Override
	public boolean follow(String user) throws RemoteException {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public Map<String, String> getTimeLine() throws RemoteException {
		return this.timeLine;
	}

	public String getPassword() {
		return this.password;
	}
	

}
